---
title: Linear Regression
author: Carlos Rodriguez
date: '2021-09-17'
slug: regression
categories: []
tags: []
subtitle: ''
summary: ''
authors: []
lastmod: '2021-09-17T22:43:40-06:00'
featured: no
image:
  caption: ''
  focal_point: ''
  preview_only: no
projects: []
type: book
weight: 10
draft: True
---


<!-- The following describes a Python-based workflow for creating a linear regression model to examine ecommerce data from an online clothing store. The store is attempting to learn where to focus their efforts on to increase their yearly sales. All data are fabricated and were sourced from the Pierian Data Udemy course on Python and Machine Learning course. -->

<!-- ```{r setup, include=FALSE} -->
<!-- knitr::opts_chunk$set(warning = FALSE) -->

<!-- library(reticulate) -->

<!-- #conda_list() -->
<!-- use_condaenv("r-reticulate") -->
<!-- ``` -->

<!-- ### Import Packages -->
<!-- ```{python} -->
<!-- # Data Analysis & Visualization Packages -->
<!-- import numpy as np -->
<!-- import pandas as pd -->
<!-- import seaborn as sns -->
<!-- import matplotlib.pyplot as plt -->

<!-- # Linear Regression Packages -->
<!-- from sklearn.model_selection import train_test_split -->
<!-- from sklearn.linear_model import LinearRegression -->
<!-- from sklearn import metrics -->
<!-- ``` -->

<!-- ### Load Data -->
<!-- ```{python} -->
<!-- customers = pd.read_csv('Ecommerce Customers') -->
<!-- ``` -->

<!-- ### Inspect Data -->
<!-- Before analysing and visualizing the data, we will take a look at the structure of the data and make note of all of different variables. As of this writing, pandas tables do not readily display well within R markdown. To get around this, I have provided the R code to display some of the information and the un-evaluated python code as well. -->
<!-- ```{python, eval = FALSE} -->
<!-- customers.head(3) -->
<!-- customers.describe() -->
<!-- customers.info() -->
<!-- ``` -->

<!-- ```{r} -->
<!-- #R code to display pandas table -->
<!-- df <- reticulate::py$customers -->
<!-- head(df, n=3) -->
<!-- ``` -->

<!-- ### Exploratory Data Analysis with Seaborn -->
<!-- After taking a look the data, we can make some basic visualizations to show the relationships between some of the numerical variables such as Time on Website, Time on App, Length of Membership, and Yearly Amount Spent. We will begin by plotting Time on Website (ToW) and Yearly Amount Spent (YAS). After visualizing the data, no apparent trends are  -->
<!-- ```{python, plot1, fig.cap = 'Joint plot between Time on Website and Yearly Amount Spent.',} -->
<!-- #%matplotlib inline -->
<!-- sns.jointplot(x = 'Time on Website', y = 'Yearly Amount Spent', data = customers) -->
<!-- plt.show() -->
<!-- ``` -->


<!-- Next, we will take a look at a joint plot of Time on App (ToA) and YAS. There seems to be a stronger relationship here when compared to ToW and YAS, but nothing that stands out. -->
<!-- ```{python, plot2, fig.cap = 'Joint plot between Time on App and Yearly Amount Spent.'} -->
<!-- sns.jointplot(x = "Time on App", y = "Yearly Amount Spent", data = customers) -->
<!-- plt.show() -->
<!-- ``` -->

<!-- In this plot, we examine Time on App (ToA) and Length of Membership (LoM) using the hex type of plot. Of all of the plots generated so far, these two variables seem to demonstrate the strongest relationship. -->
<!-- ```{python, plot3, fig.cap = 'Joint plot between Time on App and Length of Membership.'} -->
<!-- sns.jointplot(x = "Time on App", y = "Length of Membership", data = customers, kind = "hex") -->
<!-- plt.show() -->
<!-- ``` -->


<!-- Generating each of these plots can be time consuming. Luckily, the Seaborn package has quick way to produce multiple exploratory data analysis plots with the pairplot function. -->
<!-- ```{python, plot4, fig.cap = 'Pairplot of all continous variables in the customers data frame.'} -->
<!-- sns.pairplot(data = customers) -->
<!-- #plt.show() -->
<!-- ``` -->


<!-- After taking a look at the pairplot data, the relationship between LoM and YAS stands out. In the code chunk below, we can use Seaborn to make a linear model plot of these two variables. In addition to displaying a scatterplot of the data, the lmplot displays a line generated from a linear model of data. -->
<!-- ```{python, plot5, fig.cap = 'Linear model plot of the Length of Membership and Yearly Amount Spent.'} -->
<!-- sns.lmplot(x = "Length of Membership", y = "Yearly Amount Spent", data = customers) -->
<!-- #plt.show() -->
<!-- ``` -->

<!-- ### Prepare Data for Linear Regression Modelling -->
<!-- After performing some exploratory data analysis, we can then move on to building a linear and begin by preparing the data by collecting the quantitative variables. I will create two new data frames, one consisting of the continuous variables that we can use to predict Yearly Amount Spent. Then the data will be split into separate training and testing data sets. -->
<!-- ```{python} -->
<!-- # Preparing numeric data for training and testing a regression model ie cross validation -->
<!-- # customers.columns # Prints the columns that are then copied and pasted int X an y. -->
<!-- X = customers [['Avg. Session Length', 'Time on App', 'Time on Website', 'Length of Membership']] -->
<!-- y = customers["Yearly Amount Spent"] -->

<!-- # Splitting the data into test and train datasets, holding out 30% for testing -->
<!-- X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=101) -->
<!-- ``` -->

<!-- ### Train Linear Regression Model -->
<!-- After creating our training set data, a linear model can be fit. In this case we will build a model that will predict the Yearly Amount Spent from the remaining the continuous variables in the ecommerce data. Finally, we will create a df to print out the model coefficients. -->
<!-- ```{python} -->
<!-- # Initialize an empty LinearyRegression() object -->
<!-- lm = LinearRegression() -->

<!-- # Fit the x and y variables. In other words, predict y (yearly amount spent), from all of the numerical X variables -->
<!-- lm.fit(X_train,y_train) -->

<!-- # print the coefficients to each "feature" in the dataset, feature would be interchangeable with variable -->
<!-- coeff_df = pd.DataFrame(lm.coef_,X.columns,columns=['Coefficient']) -->
<!-- coeff_df -->
<!-- ``` -->

### Test Linear Regression Model
<!-- After building a model with the training data, we can then use the testing data to make predictions about the Yearly Amount Spent. Then the predicted y variables can be plotted along with the actual y variables in the testing data set.
<!-- ```{python, plot6, fig.cap = 'Scatterplot of the predicted and actual y values from the testing data set.'} -->
<!-- # Predict y from the X variables in the test set with the linear model created in the train set -->
<!-- predictions = lm.predict(X_test) # Just the testing set features -->

<!-- # plot the actual Y (from test set), with the predicted y. -->
<!-- plt.scatter(y_test, predictions) -->
<!-- #plt.show() -->

<!-- #sns.scatterplot(x = y_test, y = predictions, data = pd.DataFrame(y_test, predictions)) -->
<!-- #plt.show() -->
<!-- ``` -->


<!-- ### Evaluate Linear Regression Model -->
<!-- ```{python} -->
<!-- ######### Print the model metrics   ################ -->
<!-- print('MAE:', metrics.mean_absolute_error(y_test, predictions)) -->
<!-- print('MSE:', metrics.mean_squared_error(y_test, predictions)) -->
<!-- print('RMSE:', np.sqrt(metrics.mean_squared_error(y_test, predictions))) -->


<!-- ######### Calculate R Squared ######### -->
<!-- metrics.explained_variance_score(y_test, predictions) -->

<!-- ``` -->

<!-- ### Visually Inspect Residuals -->
<!-- ```{python} -->
<!-- sns.histplot((y_test-predictions),bins=50, kde = True) # We want the difference between the testing Y and the predicted Y's -->
<!-- plt.show() -->
<!-- ``` -->

<!-- ### Interpretation -->
<!-- According to this data for each unit increase in the variable, there is a coefficient increase in yearly spending -->
<!-- the y variable. So for example, for each unit increase in the length of membership which could have been -->
<!-- measured in in weeks, months, or years, means that there was an increase of $61.23 in yearly spending. -->
<!-- So if I were to recommend something to the company, I would try to see what it would take to increase -->
<!-- the length of membership, because it seems like that would be a way to increase their yearly spending -->
<!-- Although, I would also want to look at whether that was correlated with salary, perhaps the longer they are -->
<!-- members the more time they have to amass salary increases which increases spending. -->