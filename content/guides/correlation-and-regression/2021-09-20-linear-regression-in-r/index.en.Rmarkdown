---
title: Linear Regression Exercise 2 in R 
author: Carlos Rodriguez
date: '2021-09-20'
slug: linear-regression-in-r
categories: []
tags: []
subtitle: ''
summary: ''
authors: []
lastmod: '2021-09-20T15:42:12-06:00'
featured: no
image:
  caption: ''
  focal_point: ''
  preview_only: no
projects: []
type: book
weight: 15
draft: True
---

Bike sharing link: https://www.kaggle.com/c/bike-sharing-demand/data

Predict the total count of bikes rented during each hour covered by the test set, using only information available prior to the rental period.

### Load Packages
```{r, libraries, echo = FALSE, warning = FALSE, message=FALSE}
library(tidyverse)
```

### Load Data
```{r, message = FALSE}
df <- read_csv("bikeshare.csv")
head(df)
```

### Exploratory Data Analysis
```{r}
ggplot(data = df, aes(x = temp, y = count)) +
  geom_point(alpha = 0.2, aes(color=temp))
```

```{r}
# Ensure datetime is in POSIXct
# df$datetime <- as.POSIXct(df$datetime)

ggplot(data = df, aes(x = datetime, y = count)) +
  geom_point(alpha = 0.2, aes(color=temp)) +
  scale_color_continuous(low = "#2166AC", high = "#B2182B")
```
### Correlation between temparature and count
```{r}
cor(df$temp, df$count, method = "pearson")

# Alternatively
# cor(df[,c("temp","count")]) #produces a correlation matrix instead of a single value
```

### Boxplots of count by season
```{r}
ggplot(data = df, aes(x = as.factor(season), y = count)) +
  geom_boxplot(aes(color = as.factor(season))) +
  labs(x = "season") +
  guides(color=guide_legend("season")) +
  scale_color_discrete(labels = c("Spring", "Summer", "Fall", "Winter"))
```




### Feature Engineering
Create a new column of hour from the datetime column.
```{r}
df$hour <- sapply(df$datetime, function(x){format(x, "%H")})

```



### Scatterplot with new data (working days)
```{r}
pal <- c("#2166AC", "#67A9CF",  "#D1E5F0", "#FDDBC7", "#EF8A62", "#B2182B")
df %>% filter(workingday == 1) %>%
  ggplot(., aes(x = hour, y = count, color = temp)) +
  geom_point(position = position_jitter(w=1, h=0)) +
  scale_color_gradientn(colors = pal)
```


### Scatterplot with new data (non-working days)
```{r}
df %>% filter(workingday != 1) %>%
  ggplot(., aes(x = hour, y = count, color = temp)) +
  geom_point(position = position_jitter(w=1, h=0)) +
  scale_color_gradientn(colors = pal)
  
```


### Build a model based on temperature
```{r}
temp_model <- lm(count ~ temp, data = df)
summary(temp_model)
```
Can be interpreted as for every unit increase in temperature, one can expect a roughly 9 unit increase in bike rental counts.

### Using the temperature model to make predictions
```{r}
predict(temp_model, data.frame(temp=c(25)))

# Alternatively, y = mx + b, where m = slope, b = intercept, x = temperature
# y = 9.1705 * 25 + 6.0462
```


### Building a more complex model
```{r}
df$hour <- sapply(df$hour, as.numeric)
model <- lm(count ~ . -casual -registered -datetime -atemp, data = df) # the . means everything else, -subtracts the columsn from the call
summary(model)
```

In this example, the linear model did not perform as well. We noticed from the plots, that the data did not quite express a linear relationships. This is partly due to the seasonality of the data and because bike rental counts fluctuate throughout the day. A model suited for handling these characteristics in these data is likely to perform better. 