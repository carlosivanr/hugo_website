---
title: Two-way ANOVA
author: Carlos Rodriguez
date: '2021-05-04'
slug: two-way-anova
categories: []
tags: []
subtitle: ''
summary: 'Designs with two between-subjects factors.'
authors: []
lastmod: '2021-05-04T19:37:58-06:00'
featured: no
image:
  caption: ''
  focal_point: ''
  preview_only: no
projects: []
type: book
weight: 20
---

<!-- Prevent the jmv output from wrapping. Make it scrollable horizontally -->
<!-- <style> -->
<!-- pre code, pre, code { -->
<!--   white-space: pre !important; -->
<!--   overflow-x: scroll !important; -->
<!--   word-break: keep-all !important; -->
<!--   word-wrap: initial !important; -->
<!-- } -->
<!-- </style> -->

<!-- Limit the vertical height of output and source -->
<!-- # ```{css, echo=FALSE} -->
<!-- # pre { -->
<!-- #   max-height: 310px; -->
<!-- #   overflow-y: auto; -->
<!-- # } -->
<!-- #  -->
<!-- # pre[class] { -->
<!-- #   max-height: 100px; -->
<!-- # } -->
<!-- # ``` -->

```{r setup, include=FALSE}
#knitr::opts_chunk$set(echo = TRUE)
```

In this guide, we will cover different ways of conducting two-way ANOVAs in R. Two-way ANOVAS are an extension of one-ways ANOVAS and can be used for situations where the goal is to statistically compare means of two or more groups that differ along two or more independent variables.

### The data set
We will utilize an example with the chapter_7_table_5 data from the AMCP package. In the example dataset, we have a hypothetical experiment that tests the presence or absence of biofeedback (first independent variable) in combination with three different drugs on measures of blood pressure (second independent variables). The Feedback group is coded as a 1 or a 2 where 1 indicates the participants received biofeedback and 2 indicates participants did not. Drug is coded as 1, 2, or 3, and specifies one of three hypothetical drugs that purportedly reduce blood pressure. Finally, Scores refer to the dependent variable and measure blood pressure where lower values are better. This leaves us with a 2x3 between-subjects design. We will also assume that the assumptions of independence, equality of variance, and normality are met for the sample dataset.

```{r data, warning = FALSE, include=TRUE} 
library(AMCP)

# Load data
data("chapter_7_table_5")

# Inspect data
head(chapter_7_table_5)
```

### Perform ANOVA tests {#tests}
<!-- -----------------------TABS---------------------------------- -->
{{< tabs tabTotal="2" tabID="1" tabName1="jmv" tabName2="rstatix" tabName3="Welch's jmv" tabName4="Welch's rstatix"  >}}

<!-- -----------------------Tab 1---------------------------------- -->
{{< tab tabNum="1" >}}

We will begin by loading the jmv package and use `ANOVA()` function which can be used for both one-way and two-way designs. The following code will set Score as the dependent variable and Feedback and Drug as independent variables. The call is set to use type III sums of squares, the effect size for omnibus test will be reported as partial eta squared, post hoc tests will be performed with Feedback and Drug factors, and the plots of the means of Feedback and Drug will be generated.
```{r plot1, warning = FALSE, fig.cap = 'Estimated marginal means and confidence intervals.', message=FALSE}
library(jmv)

# ANOVA test with jmv
ANOVA(formula = Score ~ Feedback * Drug,
      data = chapter_7_table_5,
      ss = "3",
      effectSize = 'partEta',
      postHoc = c('Feedback', 'Drug'),
      postHocCorr = 'none',
      postHocES = "d",
      emMeans = ~ Feedback + Drug,
      #emMeans = list(c("Feedback", "Drug")), #generates interaction plot
      emmPlots = TRUE,
      emmTables = TRUE,
      ciWidthEmm = 95)
```
{{< /tab >}}

<!-- -----------------------Tab 2---------------------------------- -->
{{< tab tabNum="2" >}}
When using rstatix, it's useful to load the tidyverse package as well. This will make it so that we can use the pipe operator (`%>%`) and the `group_by()` function. Once we load our data, we will first want to convert Feedback and Drug to factor so the values get treated as categorical variable. Next, we will build an ANOVA model with the base R `aov()` function that predicts Score by Feedback and Drug. Next, we will use the rstatix `anova_test()` function on our aov model to produce the output for the omnibus test. The reason for using the `anova_test()` function is because it allows us to specify the type of sums of squares. 

There are several ways of calculating the sums of squares including Type I, Type II, and Type III. In Type I SS, the order in which you enter predictors matters and tend not to get used very often. The `aov()` function defaults to Type I, but there is no way built in option to specify the SS. Type II SS can also be used for ANOVA and may be a good option in cases where an interaction is not of interest. Type III SS tend to be recommended and are the default setting in commercial statistical packages such as SPSS and SAS. Type III SS have the advantage of better of evaluating an interaction which can offten be of interest and are recommended for unequal samples.

```{r rstatix, warning = FALSE, message=FALSE}
library(tidyverse)
library(rstatix)
library(ggpubr)

# Convert Drug and Feedback to factor
chapter_7_table_5$Drug <- as.factor(chapter_7_table_5$Drug)
chapter_7_table_5$Feedback <- as.factor(chapter_7_table_5$Feedback)

# Create aov() model
model <- aov(formula = Score ~ Feedback * Drug,
    data = chapter_7_table_5)

# anova_test on  model, with partial eta squared and type III ss
anova_test(model, effect.size = "pes", type = 3)
```
The results from the omnibus test reveal that there is no significant interaction between Drug and Feedback. On the other hand, there are significant main effects for Drug and for Feedback. Because the interaction is not significant, may proceed to perform tests of marginal means. Had the interaction been significant, we could have opted to perfrom tests of simple effects of Drug within Feedback, or Feedback within drug. However, these are primarily suggestions and the approach to analyzing the data should be guided by the research question.

#### Tests of marginal means
The rstatix package includes a function, `emmeans_test()`, that can perform tests of estimated marginal means. To perform these tests, we will use the aov model that we created in the previous step and we will conduct two separate tests, one for Feedback and one for Drug. The correction method in this example is set to `"none"`, but this can be easily changed according to your situation. The available correction methods can be found by typing `help(anova_test)` in the Console.

We will also use the `get_summary_stats()` function and illustrate how the tidyverse package meshes with rstatix to produce descriptive statistics to aid in the interpretation of the output. First we will start with the chapter_7_table_5 data and pipe it to the `group_by()` function which will create subsets of data according to combinations of Drug and Feedback, then that output is fed into the `get_summary_stats()` which will calculate several descriptive statistics for each group. Finally, to display only a part of this output, the `select()` function will display data by specifying column names.

To plot the data we will rely on the ggpubr package. The ggpubr and rstatix packages are developed by the same individual and are aimed at simplifying the syntax for conducting statistical tests and generating plots in R. For our purposes we will use the `ggerrorplot()` function to plot means and confidence intervals.

#### Feedback
```{r blu, echo=FALSE}
azl <- "#1565c0"
```
```{r plot3, fig.cap = 'Means and confidence intervals for Feedback collapsed across Drug. *, p<0.05; **, p<0.01; ***, p<0.001; ns, not significant. n.b. The confidence intervals plotted by the ggpubr and jmv packages are based on estimated marginal means. Note that the standard errors are the same for all levels of Feedback. In some situations, you may want to plot the cell means and the corresponding confidence intervals instead. To plot the cell means with ggpubr, see the code chunk below. ', warning=FALSE}

# Test of marginal means for Feedback
pwc <- chapter_7_table_5 %>% 
  emmeans_test(Score ~ Feedback, 
               p.adjust.method = "none", 
               model = model)

# Print the results of the pairwise comparisons of Feedback
pwc

# Print the estimated marginal means of Feedback
get_emmeans(pwc)

# Modify pwc to include x and y positions for plotting signficance markers
pwc <- pwc %>% add_xy_position(x = "Feedback", fun = "mean_ci")

# Generate an error plot uses ggpubr AND ggplot functions to layer the plot
ggerrorplot(get_emmeans(pwc), 
       x = "Feedback", 
       y = "emmean",
       ylab = "Mean BP Scores") +
    geom_errorbar(aes(ymin = conf.low, ymax = conf.high), 
                  width = 0.1) +
    stat_pvalue_manual(pwc, hide.ns = TRUE, tip.length = FALSE)
```

#### Plot cell means
```{r, eval=FALSE}
#Produce an error plot with cell means and ci instead of estimated marginal means
#The same code chunk can be used to get cell means of Drug by changing the "x = " argument
ggerrorplot(chapter_7_table_5,
       x = "Feedback",
       y = "Score",
       add = "mean",
       desc_stat = "mean_ci",
       error.plot = "errorbar",
       width = .1)

#Print cell mean, standard deviation, and standard error for each level of Feedback
chapter_7_table_5 %>%
  group_by(Feedback) %>%
  get_summary_stats(Score) %>%
  select(Feedback, mean, sd, se)
```
#### Drug
```{r plot4, fig.cap = 'Means and confidence intervals for Drug collapsed across Feedback. *, p<0.05; **, p<0.01; ***, p<0.001; ns, not significant', warning=FALSE}
# Test of marginal means for Drug
pwc <- chapter_7_table_5 %>% 
  emmeans_test(Score ~ Drug, 
               p.adjust.method = "none", 
               model = model)

# Print the results of the pairwise comparisons of Feedback
pwc

# Print the estimated marginal means of Feedback
get_emmeans(pwc)

# Modify pwc to include x and y positions for plotting signficance markers
pwc <- pwc %>% add_xy_position(x = "Feedback", fun = "mean_ci")

# Generate an error plot uses ggpubr AND ggplot functions to layer the plot
ggerrorplot(get_emmeans(pwc), 
       x = "Drug", 
       y = "emmean",
       ylab = "Mean BP Scores") +
    geom_errorbar(aes(ymin = conf.low, ymax = conf.high), 
                  width = 0.1) +
    stat_pvalue_manual(pwc, hide.ns = FALSE, tip.length = FALSE)
```

```{r, eval=FALSE}
# Generate an interaction plot
ggline(chapter_7_table_5, 
       x = "Feedback", 
       y = "Score",
       color = "Drug",
       add = "mean_se",
       palette = "jama",
       position = position_dodge(.2))
```

The two tests of marginal means will produce a couple of messages to remind us that the results could be misleading because of interactions. However, as we saw in the omnibus test, there was no significant interaction and can disregard the messages. The results of the `emmeans_test()` on Feedback indicate a significant effect and suggests that the participants undergoing biofeedback had lower bloodpressure scores than those without biofeedback. When examining the output of the results of the `emmeans_test()` on Drug, we see that the mean of Drug 1 is significantly lower than that of Drug 2 and Drug 3. However, the mean of Drug 2 is not significantly different than that of Drug 3.

{{< /tab >}}

{{< /tabs >}}


[Back to tabs](#tests)

### Wrap up
The jmv and rstatix functions both produce the same results, as they should because they share many of the underlying statistical functions. The jmv package is a great place to start with statistical tests if you are beginning with R. One reason for this is because it simplifies some of the syntax, generates plots automatically, and it can automatically convert some of your numerical data to categorical. While it's a lot easier to code a 2x3 ANOVA with jmv there are some advantages to using rstatix and ggpubr. One advantage is that the ggpubr functions are designed to take in arguments from rstatix that make plotting significance markers relatively straightforward. In addition, ggpubr plots can be used as a starting point to layer additional ggplot geometric elements like the `geom_errorbar()` in Figures 3 and 4. 


### References
<div id="refs" class="references">

<div id="ref-R-ggpubr">

Kassambara, Alboukadel. 2020a. *Ggpubr: ’Ggplot2’ Based Publication Ready Plots*. <https://CRAN.R-project.org/package=ggpubr>.

</div>

<div id="ref-R-rstatix">

———. 2020b. *Rstatix: Pipe-Friendly Framework for Basic Statistical Tests*. <https://CRAN.R-project.org/package=rstatix>.

</div>

<div id="ref-R-AMCP">

Maxwell, Scott, Harold Delaney, and Ken Kelley. 2020. *AMCP: A Model Comparison Perspective*. <https://CRAN.R-project.org/package=AMCP>.

</div>

<div id="ref-AMCP">

Maxwell, Scott E, Harold D Delaney, and Ken Kelley. 2017. *Designing Experiments and Analyzing Data: A Model Comparison Perspective*. Routledge.

</div>

<div id="ref-R-jmv">

Selker, Ravi, Jonathon Love, and Damian Dropmann. 2020. *Jmv: The ’Jamovi’ Analyses*. <https://CRAN.R-project.org/package=jmv>.

</div>

<div id="ref-R-tidyverse">

Wickham, Hadley. 2019. *Tidyverse: Easily Install and Load the ’Tidyverse’*. <https://CRAN.R-project.org/package=tidyverse>.

</div>

</div>
