---
title: Histograms in ggplot2
author: Carlos Rodriguez
date: '2024-06-26'
slug: percentage-histograms
categories: []
tags: []
subtitle: ''
summary: ''
authors: []
lastmod: '2024-06-26T09:31:48-06:00'
featured: no
image:
  caption: ''
  focal_point: ''
  preview_only: no
projects: []
type: book
weight: 30
draft: False
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

Histograms are a great way to display the frequency of categorical variables and can aid the the understanding of the distribution of a variable to make visual comparisons across groups. In this guide, I focus on the use of the ggplot2 package to make different types of histograms. The following snippets use the built-in mtcars data set to demonstrate.

```{r message=FALSE}
library(tidyverse)
```

```{r}
head(mtcars)
```

## Traditional Histogram
```{r}
mtcars %>%
  ggplot(., aes(x = cyl)) +
  geom_bar() +
  theme_minimal()
```

## Paneled histogram

Here we make separate panels to show the histogram by am(automatic transmission) where a 1 denotes automatic and 0 denotes manual transmission. 
```{r}
mtcars %>%
  ggplot(., aes(x = cyl)) +
  geom_bar() +
  facet_wrap(~am) +
  theme_minimal()
```

### Modify the panel labels

To modify the labels, we can convert the variable am to a factor where 1 is set to Automatic and 0 is set to Manual, then setting the order of the levels match the previous plot.
```{r}
mtcars %>%
  mutate(am = factor(ifelse(am == 1, "Automatic", "Manual"), levels = c("Manual", "Automatic"))) %>%
  ggplot(., aes(x = cyl)) +
  geom_bar() +
  facet_wrap(~am) +
  theme_minimal()
```


## Clustered histogram
In a this clustered histogram separate bars at each value of cyl are displayed, one for automatic and another for manual. The position option is needed to display the separate bars side by side, otherwise the bars will appear stacked instead.
```{r}
colors = c( "#440154FF","#1565c0")
mtcars %>%
  mutate(am = factor(am)) %>%
  ggplot(., aes(x = cyl)) +
  geom_bar(aes(color = am, fill = am), position = position_dodge2(preserve = "single")) +
  theme_minimal() +
  scale_color_manual(values = colors) +
  scale_fill_manual(values = colors)

```

## Clustered histogram with percentages
### Denominator is the grouping variable
There may be situations where a percentage instead of a count facilitates comparisons across groups. In this version, the denominator for calculating a percentage is that of the total number of observations within each level of am. To produce such a plot, we first need to group the data by am and cyl, and then calculated frequencies and proportions. We can see that 4-cylinder vehicles make up about 60% of the observations where the transmission is an automatic one which can be compared to about 15% of 4-cylinder vehicles are equipped with a manual transmission.
```{r message=FALSE, echo=FALSE}
mtcars %>%
  mutate(am = factor(am)) %>%
  group_by(am, cyl) %>%
  summarise(n = n()) %>%
  mutate(freq = n / sum(n)) %>%
  ggplot(., aes(x = cyl, y = freq, fill = am)) +
  geom_bar(stat = "identity", position = position_dodge2(preserve = "single")) +
  scale_y_continuous(labels = scales::label_percent()) +
  theme_minimal() +
  scale_fill_manual(values = colors) +
  ylab("Percentage within each am group") 
```
To ensure that the appropriate values are displayed, a quick gtsummary() table will display the actual percentages in a table.
```{r}
mtcars %>%
  mutate(am = factor(am)) %>%
  select(cyl, am) %>%
  gtsummary::tbl_summary(by = am, digits = list(everything() ~ c(0,2))) 
```

### Denominator is the sample size
The proportion of all observations can also be displayed. In this plot we see that bout 25% of all observations are automatic and 4 cylinder vehicles.
```{r}
mtcars %>%
  mutate(am = factor(am)) %>%
  ggplot(., aes(cyl, fill = am)) +
  geom_bar(aes(y = (..count..)/sum(..count..)),
           position = position_dodge2(preserve = "single")) +
  scale_y_continuous(labels = scales::label_percent()) +
  theme_minimal() +
  scale_fill_manual(values = colors) +
  ylab("Percent of all observations") 
```
To double check the values, we can display a variable in which cyl has been crossed with am.
```{r}
mtcars %>%
  mutate(am = factor(ifelse(am == 1, "Automatic", "Manual"), levels = c("Manual", "Automatic"))) %>%
  mutate(var = str_c(cyl, am)) %>%
  select(var) %>%
  gtsummary::tbl_summary()

```

